// This file was generated by counterfeiter
package apifakes

import (
	"sync"

	"github.com/cloudfoundry/cli/cf/api"
	"github.com/cloudfoundry/cli/cf/models"
)

type FakeBuildpackRepository struct {
	FindByNameStub        func(name string) (buildpack models.Buildpack, apiErr error)
	findByNameMutex       sync.RWMutex
	findByNameArgsForCall []struct {
		name string
	}
	findByNameReturns struct {
		result1 models.Buildpack
		result2 error
	}
	ListBuildpacksStub        func(func(models.Buildpack) bool) error
	listBuildpacksMutex       sync.RWMutex
	listBuildpacksArgsForCall []struct {
		arg1 func(models.Buildpack) bool
	}
	listBuildpacksReturns struct {
		result1 error
	}
	CreateStub        func(name string, position *int, enabled *bool, locked *bool) (createdBuildpack models.Buildpack, apiErr error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		name     string
		position *int
		enabled  *bool
		locked   *bool
	}
	createReturns struct {
		result1 models.Buildpack
		result2 error
	}
	DeleteStub        func(buildpackGUID string) (apiErr error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		buildpackGUID string
	}
	deleteReturns struct {
		result1 error
	}
	UpdateStub        func(buildpack models.Buildpack) (updatedBuildpack models.Buildpack, apiErr error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		buildpack models.Buildpack
	}
	updateReturns struct {
		result1 models.Buildpack
		result2 error
	}
}

func (fake *FakeBuildpackRepository) FindByName(name string) (buildpack models.Buildpack, apiErr error) {
	fake.findByNameMutex.Lock()
	fake.findByNameArgsForCall = append(fake.findByNameArgsForCall, struct {
		name string
	}{name})
	fake.findByNameMutex.Unlock()
	if fake.FindByNameStub != nil {
		return fake.FindByNameStub(name)
	} else {
		return fake.findByNameReturns.result1, fake.findByNameReturns.result2
	}
}

func (fake *FakeBuildpackRepository) FindByNameCallCount() int {
	fake.findByNameMutex.RLock()
	defer fake.findByNameMutex.RUnlock()
	return len(fake.findByNameArgsForCall)
}

func (fake *FakeBuildpackRepository) FindByNameArgsForCall(i int) string {
	fake.findByNameMutex.RLock()
	defer fake.findByNameMutex.RUnlock()
	return fake.findByNameArgsForCall[i].name
}

func (fake *FakeBuildpackRepository) FindByNameReturns(result1 models.Buildpack, result2 error) {
	fake.FindByNameStub = nil
	fake.findByNameReturns = struct {
		result1 models.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildpackRepository) ListBuildpacks(arg1 func(models.Buildpack) bool) error {
	fake.listBuildpacksMutex.Lock()
	fake.listBuildpacksArgsForCall = append(fake.listBuildpacksArgsForCall, struct {
		arg1 func(models.Buildpack) bool
	}{arg1})
	fake.listBuildpacksMutex.Unlock()
	if fake.ListBuildpacksStub != nil {
		return fake.ListBuildpacksStub(arg1)
	} else {
		return fake.listBuildpacksReturns.result1
	}
}

func (fake *FakeBuildpackRepository) ListBuildpacksCallCount() int {
	fake.listBuildpacksMutex.RLock()
	defer fake.listBuildpacksMutex.RUnlock()
	return len(fake.listBuildpacksArgsForCall)
}

func (fake *FakeBuildpackRepository) ListBuildpacksArgsForCall(i int) func(models.Buildpack) bool {
	fake.listBuildpacksMutex.RLock()
	defer fake.listBuildpacksMutex.RUnlock()
	return fake.listBuildpacksArgsForCall[i].arg1
}

func (fake *FakeBuildpackRepository) ListBuildpacksReturns(result1 error) {
	fake.ListBuildpacksStub = nil
	fake.listBuildpacksReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildpackRepository) Create(name string, position *int, enabled *bool, locked *bool) (createdBuildpack models.Buildpack, apiErr error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		name     string
		position *int
		enabled  *bool
		locked   *bool
	}{name, position, enabled, locked})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(name, position, enabled, locked)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeBuildpackRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeBuildpackRepository) CreateArgsForCall(i int) (string, *int, *bool, *bool) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].name, fake.createArgsForCall[i].position, fake.createArgsForCall[i].enabled, fake.createArgsForCall[i].locked
}

func (fake *FakeBuildpackRepository) CreateReturns(result1 models.Buildpack, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 models.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildpackRepository) Delete(buildpackGUID string) (apiErr error) {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		buildpackGUID string
	}{buildpackGUID})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(buildpackGUID)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeBuildpackRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeBuildpackRepository) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].buildpackGUID
}

func (fake *FakeBuildpackRepository) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildpackRepository) Update(buildpack models.Buildpack) (updatedBuildpack models.Buildpack, apiErr error) {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		buildpack models.Buildpack
	}{buildpack})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(buildpack)
	} else {
		return fake.updateReturns.result1, fake.updateReturns.result2
	}
}

func (fake *FakeBuildpackRepository) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeBuildpackRepository) UpdateArgsForCall(i int) models.Buildpack {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].buildpack
}

func (fake *FakeBuildpackRepository) UpdateReturns(result1 models.Buildpack, result2 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 models.Buildpack
		result2 error
	}{result1, result2}
}

var _ api.BuildpackRepository = new(FakeBuildpackRepository)
