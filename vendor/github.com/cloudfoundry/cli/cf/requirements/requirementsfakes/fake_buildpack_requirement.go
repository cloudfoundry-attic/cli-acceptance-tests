// This file was generated by counterfeiter
package requirementsfakes

import (
	"sync"

	"github.com/cloudfoundry/cli/cf/models"
	"github.com/cloudfoundry/cli/cf/requirements"
)

type FakeBuildpackRequirement struct {
	ExecuteStub        func() error
	executeMutex       sync.RWMutex
	executeArgsForCall []struct{}
	executeReturns     struct {
		result1 error
	}
	GetBuildpackStub        func() models.Buildpack
	getBuildpackMutex       sync.RWMutex
	getBuildpackArgsForCall []struct{}
	getBuildpackReturns     struct {
		result1 models.Buildpack
	}
}

func (fake *FakeBuildpackRequirement) Execute() error {
	fake.executeMutex.Lock()
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct{}{})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub()
	} else {
		return fake.executeReturns.result1
	}
}

func (fake *FakeBuildpackRequirement) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeBuildpackRequirement) ExecuteReturns(result1 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildpackRequirement) GetBuildpack() models.Buildpack {
	fake.getBuildpackMutex.Lock()
	fake.getBuildpackArgsForCall = append(fake.getBuildpackArgsForCall, struct{}{})
	fake.getBuildpackMutex.Unlock()
	if fake.GetBuildpackStub != nil {
		return fake.GetBuildpackStub()
	} else {
		return fake.getBuildpackReturns.result1
	}
}

func (fake *FakeBuildpackRequirement) GetBuildpackCallCount() int {
	fake.getBuildpackMutex.RLock()
	defer fake.getBuildpackMutex.RUnlock()
	return len(fake.getBuildpackArgsForCall)
}

func (fake *FakeBuildpackRequirement) GetBuildpackReturns(result1 models.Buildpack) {
	fake.GetBuildpackStub = nil
	fake.getBuildpackReturns = struct {
		result1 models.Buildpack
	}{result1}
}

var _ requirements.BuildpackRequirement = new(FakeBuildpackRequirement)
